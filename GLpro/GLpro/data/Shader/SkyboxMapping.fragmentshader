#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;

// Ouput data
layout(location = 0) out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;



void main(){

	// Material properties
	vec3 MaterialDiffuseColor = texture( myTextureSampler, UV ).rgb;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	//vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);
	
	vec3 LightColor = vec3(1,1,1);


	//vec3 n = normalize( Normal_cameraspace );
	
	// Eye vector (towards the camera)
	//vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	//vec3 R = reflect(-l,n);
	
	float visibility=1.0;
	
	//color = MaterialAmbientColor +
	//	visibility * MaterialDiffuseColor * LightColor * LightPower * cosTheta+
	//	visibility * MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5);
	color = MaterialDiffuseColor;
}

