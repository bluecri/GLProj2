#version 330 core

// from configs_light.h

#define MAX_DIRECTIONAL_LIGHT_NUM		8
#define MAX_SPOT_LIGHT_NUM				32
#define MAX_POINTL_LIGHT_NUM			32
#define MAX_DFFERED_POINTL_LIGHT_NUM	256

#define TEXTURE_SHADOW_WIDTH				8192
#define TEXTURE_SHADOW_HEIGHT				6144

#define TEXTURE_DIRECTIONAL_LIGHT_WIDTH		1024
#define TEXTURE_SPOT_LIGHT_WIDTH			512
#define TEXTURE_POINT_LIGHT_WIDTH			128
#define TEXTURE_POINT_CUBE_NUM				6

#define TEXTURE_DIRECTIONAL_LIGHT_HEIGHT_START	0
#define TEXTURE_SPOT_LIGHT_HEIGHT_START		2048
#define TEXTURE_POINT_LIGHT_HEIGHT_START		4096

// Interpolated values from the vertex shaders
in vec2 UV;
in vec4 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;

// Ouput data
layout(location = 0) out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform sampler2D shadowMap;

// uniform sampler2DShadow

uniform mat4 ViewV;		// camera v
uniform mat4 M;		// model

layout (std140) uniform DirectionalLIghtBlock
{
	int		_dLightNum;
	vec4	_dLightColorVec[MAX_DIRECTIONAL_LIGHT_NUM];
	mat4	_dLightVMat[MAX_DIRECTIONAL_LIGHT_NUM];
	mat4	_dLightPMat[MAX_DIRECTIONAL_LIGHT_NUM];
};  

layout (std140) uniform SpotLIghtBlock
{
	int		_sLightNum;
	float	_sLlightPower[MAX_SPOT_LIGHT_NUM];
	vec4	_sLlightColorVec[MAX_SPOT_LIGHT_NUM];
	vec3	_sLlightPosVec[MAX_SPOT_LIGHT_NUM];
	mat4	_sLlightVMat[MAX_SPOT_LIGHT_NUM];
	mat4	_sLlightPMat[MAX_SPOT_LIGHT_NUM];
};  

layout (std140) uniform PointLIghtBlock
{
	int		_pLightNum;
	float	_pLightPower[MAX_POINTL_LIGHT_NUM];
	vec4	_pLightColorVec[MAX_POINTL_LIGHT_NUM];
	vec3	_pLightPosVec[MAX_POINTL_LIGHT_NUM];
	mat4	_pLightVPMat[MAX_POINTL_LIGHT_NUM];
};  

layout (std140) uniform DeferredPointLIghtBlock
{
	int		_dfLightNum;
	float	_dfLightPower[MAX_DFFERED_POINTL_LIGHT_NUM];
	vec4	_dfLightColorVec[MAX_DFFERED_POINTL_LIGHT_NUM];
	vec3	_dfLightPosVec[MAX_DFFERED_POINTL_LIGHT_NUM];
	mat4	_dfLightVMat[MAX_DFFERED_POINTL_LIGHT_NUM];
	mat4	_dfLightVPMat[MAX_DFFERED_POINTL_LIGHT_NUM];
};  
/*
vec2 poissonDisk[16] = vec2[]( 
   vec2( -0.94201624, -0.39906216 ), 
   vec2( 0.94558609, -0.76890725 ), 
   vec2( -0.094184101, -0.92938870 ), 
   vec2( 0.34495938, 0.29387760 ), 
   vec2( -0.91588581, 0.45771432 ), 
   vec2( -0.81544232, -0.87912464 ), 
   vec2( -0.38277543, 0.27676845 ), 
   vec2( 0.97484398, 0.75648379 ), 
   vec2( 0.44323325, -0.97511554 ), 
   vec2( 0.53742981, -0.47373420 ), 
   vec2( -0.26496911, -0.41893023 ), 
   vec2( 0.79197514, 0.19090188 ), 
   vec2( -0.24188840, 0.99706507 ), 
   vec2( -0.81409955, 0.91437590 ), 
   vec2( 0.19984126, 0.78641367 ), 
   vec2( 0.14383161, -0.14100790 ) 
);
*/
vec2 poissonDisk[4] = vec2[](
  vec2( -0.94201624, -0.39906216 ),
  vec2( 0.94558609, -0.76890725 ),
  vec2( -0.094184101, -0.92938870 ),
  vec2( 0.34495938, 0.29387760 )
);

mat4 biasMatrix = mat4(
	0.5, 0.0, 0.0, 0.0,
	0.0, 0.5, 0.0, 0.0,
	0.0, 0.0, 0.5, 0.0,
	0.5, 0.5, 0.5, 1.0
);

// Returns a random number based on a vec3 and an int.
float random(vec3 seed, int i){
	vec4 seed4 = vec4(seed,i);
	float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));
	return fract(sin(dot_product) * 43758.5453);
}

void main(){
	
	// Material properties
	vec3 MaterialDiffuseColor = texture( myTextureSampler, UV ).rgb;
	vec3 MaterialAmbientColor = vec3(0.2, 0.2, 0.2) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3, 0.3, 0.3);

	vec3 MaterialAmbientColorFactor = vec3(0.0, 0.0, 0.0);
	vec3 MaterialSpecularColorFactor = vec3(0.0, 0.0, 0.0);

	//vec3 MaterialAmbientColorFactor = vec3(1.0, 1.0, 1.0);
	//vec3 MaterialSpecularColorFactor = vec3(1.0, 1.0, 1.0);

	vec3 n = normalize( Normal_cameraspace );

	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	
	// ====== light loop =========
	for (int loop = 0; loop < _dLightNum; loop++)
	{
		// Light emission properties
		vec3 LightColor = _dLightColorVec[loop].xyz;
		float LightPower = 1.0f;

		//float distance = length( LightPosition_worldspace - Position_worldspace.xyz );

		vec4 ShadowCoord = biasMatrix * _dLightPMat[loop] * _dLightVMat[loop] * Position_worldspace;
		
		// Vector that goes from the vertex to the light, in camera space
		//vec3 LightDirection_cameraspace = (ViewV * vec4(LightInvDirection_worldspace,0)).xyz;
		vec3 LightInvDirection_worldspace = transpose(_dLightVMat[loop])[2].xyz;
		vec3 LightDirection_cameraspace = ( ViewV * vec4(LightInvDirection_worldspace,0)).xyz;
		vec3 l = normalize( LightDirection_cameraspace );


		// Direction of the light (from the fragment to the light)
		// Cosine of the angle between the normal and the light direction, 
		// clamped above 0
		//  - light is at the vertical of the triangle -> 1
		//  - light is perpendiular to the triangle -> 0
		//  - light is behind the triangle -> 0
		float cosTheta = clamp( dot( n,l ), 0,1 );

		vec3 R = reflect(-l,n);

		// Direction in which the triangle reflects the light
		// Cosine of the angle between the Eye vector and the Reflect vector,
		// clamped to 0
		//  - Looking into the reflection -> 1
		//  - Looking elsewhere -> < 1
		float cosAlpha = clamp( dot( E,R ), 0,1 );

		float visibility=1.0;

		// Fixed bias, or...
		float bias = 0.005;

		// ...variable bias
		// float bias = 0.005*tan(acos(cosTheta));
		// bias = clamp(bias, 0,0.01);

		// viewport
		ShadowCoord.x = ShadowCoord.x / TEXTURE_DIRECTIONAL_LIGHT_WIDTH;
		ShadowCoord.y = ShadowCoord.y / TEXTURE_DIRECTIONAL_LIGHT_WIDTH;
		int shadowTextureWidthNum = TEXTURE_SHADOW_WIDTH/TEXTURE_DIRECTIONAL_LIGHT_WIDTH;

		vec2 startShadowCoord = vec2(
			(_dLightNum % shadowTextureWidthNum) * TEXTURE_DIRECTIONAL_LIGHT_WIDTH,
			(_dLightNum / shadowTextureWidthNum) * TEXTURE_DIRECTIONAL_LIGHT_WIDTH + TEXTURE_DIRECTIONAL_LIGHT_HEIGHT_START
		);
		startShadowCoord.x /= TEXTURE_SHADOW_WIDTH;
		startShadowCoord.y /= TEXTURE_SHADOW_HEIGHT;

		ShadowCoord.xy += startShadowCoord;

		for (int i=0;i<4;i++){
			// (  texture(xy).z == some object min dist from light ) < (ShadowCoord.z == shadow space vertex dist)
			if ( texture( shadowMap, ShadowCoord.xy + poissonDisk[i]/700.0 ).z  <  ShadowCoord.z-bias )
			{
				//visibility-=0.2;
			}
		}

		MaterialAmbientColorFactor	+= visibility * LightColor * LightPower * cosTheta;
		MaterialSpecularColorFactor	+= visibility * LightColor * LightPower * pow(cosAlpha,5);
	}

	for (int loop = 0; loop < _sLightNum; loop++)
	{
	}

	for (int loop = 0; loop < _pLightNum; loop++)
	{
	}

	// For spot lights, use either one of these lines instead.
	// if ( texture( shadowMap, (ShadowCoord.xy/ShadowCoord.w) ).z  <  (ShadowCoord.z-bias)/ShadowCoord.w )
	// if ( textureProj( shadowMap, ShadowCoord.xyw ).z  <  (ShadowCoord.z-bias)/ShadowCoord.w )

	color = 
		MaterialAmbientColor
		+ MaterialDiffuseColor * MaterialAmbientColorFactor
		+ MaterialSpecularColor * MaterialSpecularColorFactor;

}