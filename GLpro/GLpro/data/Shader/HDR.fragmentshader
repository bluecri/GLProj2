#version 330 core

layout (location = 0) out vec3 outColor;   

in vec2 UV;

uniform sampler2D TextrueGFBO;
uniform sampler2D TextureBloom;
uniform int UseBloom;
uniform int UseToneMapping;
uniform float Exposure;

void main(){
	
	const float gamma = 2.2;
	vec3 hdrColor = pow( texture( TextrueGFBO, UV ).rgb ,vec3(gamma));	// already gamma correction is adjusted by artist.

	if(UseToneMapping == 1)
	{
		vec3 mapped = hdrColor / (hdrColor + vec3(1.0));
		mapped = pow(mapped, vec3(1.0 / gamma));
		outColor = mapped;

		return;
	}

	if(UseBloom == 1)
	{
		vec3 bloomColor = texture(TextureBloom, UV).rgb;
		hdrColor += bloomColor; // additive blending
		
		// print bloom debug
		/*
		outColor = bloomColor;
		return;
		*/
	}

    vec3 mapped = vec3(1.0) - exp(-hdrColor * Exposure);
    mapped = pow(mapped, vec3(1.0 / gamma));
	outColor = mapped;
	
	// debug
	// outColor = vec3(0.0, 0.0, 0.0);
}